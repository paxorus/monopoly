<!DOCTYPE html>
<html><head><title>Monopoly Game</title>
<link href="/stylesheets/main.css" rel="stylesheet"></link>
</head>

<body>

<!-- Game board -->
<div id="board"></div>

<!-- Fill center of board. -->
<!-- <div style="position:absolute;right:5%;width:45%;top:9%;height:81%;background-color:#AAA"></div> -->

<!-- Property description card -->
<div id="location-card">
<div class="head" id="propname"></div>
<center style="background-color:rgb(213,232,212)">
    <div id="tax-info"></div>
    <div id="rent-table">
        <div id="price"></div>
        <div id="owner-name"></div>
        <br />
        <table>
            <tr id="rent0"></tr>
            <tr id="rent1"></tr>
            <tr id="rent2"></tr>
            <tr id="rent3"></tr>
            <tr id="rent4"></tr>
            <tr id="rent5"></tr>
        </table>
        <br id="mortgage-margin" />
        <div id="mortgage-value"></div>
        <div id="price-per-house"></div>
    </div>
    <div class="button-negative" onclick="hideLocationCard()">Close</div>
</center>
</div>


<div id="initial-interactive" class="interactive" style="display: none">
    You will go first.
    <div class="button" onclick="executeTurn()">Start Game</div>
</div>

<div id="waiting-on-player" class="interactive" style="display: none">
    It's <span id="current-player-name"></span>'s turn.
</div>

<div id="interactive" class="interactive">
    <div class="button" onclick="executeTurn()" id="execute-turn" style="display: none">Execute Turn</div>
    <div id="message-box">
    </div>
    <div id="button-box">
    </div>
    <div class="button" onclick="advanceTurn()" id="end-turn" style="display: none">End Turn</div>
    <!-- <br /> -->
    <!-- <div class="button" onclick="transaction()">Side Transaction</div> -->
</div>



<!-- Player HUDs -->
<div id="heads"></div>

<script src="/javascripts/third-party/jquery.js"></script>
<script type="module" src="/javascripts/display-card.js"></script>
<script type="module" src="/javascripts/execute-turn.js"></script>
<script type="module" src="/javascripts/startup.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="module">
const secretKey = '<%= secretKey %>';
window.secretKey = secretKey;

import {
    allowConcludeTurn,
    addGetOutOfJailFreeCard,
    advanceTurn,
    buildHouseButtons,
    buyHouse,
    executeTurn,
    mortgageProperty,
    offerPayOutOfJail,
    offerUnownedProperty,
    purchaseProperty,
    respondToBuyOffer,
    respondPayOutOfJail,
    sellHouse,
    unmortgageProperty,
    updateGetOutOfJailFreeCards,
    useGetOutOfJailFreeCard
} from "/javascripts/execute-turn.js";

window.allowConcludeTurn = allowConcludeTurn;
window.addGetOutOfJailFreeCard = addGetOutOfJailFreeCard;
window.advanceTurn = advanceTurn;
window.buildHouseButtons = buildHouseButtons;
window.executeTurn = executeTurn;
window.mortgageProperty = mortgageProperty;
window.offerPayOutOfJail = offerPayOutOfJail;
window.offerUnownedProperty = offerUnownedProperty;
window.purchaseProperty = purchaseProperty;
window.respondToBuyOffer = respondToBuyOffer;
window.respondPayOutOfJail = respondPayOutOfJail;
window.unmortgageProperty = unmortgageProperty;
window.updateGetOutOfJailFreeCards = updateGetOutOfJailFreeCards;
window.useGetOutOfJailFreeCard = useGetOutOfJailFreeCard;

import Player from "/javascripts/player.js";
window.Player = Player;

import {players, startUp, updateTurn, GlobalState} from "/javascripts/startup.js";
window.players = players;
window.GlobalState = GlobalState;

import {hideLocationCard} from "/javascripts/display-card.js";
window.hideLocationCard = hideLocationCard;

import {log} from "/javascripts/message-box.js";
window.log = log;

const socket = io();
window.socket = socket;

socket.on("start-up", ({newPlayers, yourPlayerNum, startingPlayerNum}) => {
    newPlayers.forEach(player => {
        players.push(new Player(player.name, player.num, player.spriteFileName));
    });

    startUp(yourPlayerNum, startingPlayerNum);
});

// Updates
socket.on("log", text => {
    console.log("log", text);
    log(text);
});

socket.on("update-balance", ({playerId, balance}) => {
    players[playerId].updateBalance(balance);
});

socket.on("update-location", ({playerId, placeIdx}) => {
    players[playerId].updateLocation(placeIdx);
});

// Turn actions
socket.on("allow-conclude-turn", () => {
    allowConcludeTurn();
});

socket.on("advance-turn", ({nextPlayerId}) => {
    updateTurn(nextPlayerId);
});

// Property actions
socket.on("offer-unowned-property", ({placeIdx}) => {
    offerUnownedProperty(GlobalState.me, placeIdx);
});

socket.on("purchase-property", ({playerId, placeIdx}) => {
    purchaseProperty(players[playerId], placeIdx);
});

socket.on("build-house-buttons", ({placeIdx}) => {
    buildHouseButtons(placeIdx);
});

socket.on("buy-house", ({playerId, placeIdx}) => {
    buyHouse(players[playerId], placeIdx);
});

socket.on("sell-house", ({playerId, placeIdx}) => {
    sellHouse(players[playerId], placeIdx);
});

// Jail actions
socket.on("go-to-jail", ({playerId}) => {
    players[playerId].goToJail();
});

socket.on("get-out-of-jail", ({playerId}) => {
    players[playerId].getOutOfJail();
});

socket.on("add-jail-card", ({playerId}) => {
    addGetOutOfJailFreeCard(players[playerId]);
});

socket.on("use-jail-card", ({playerId}) => {
    updateGetOutOfJailFreeCards(players[playerId]);
});

socket.on("update-jail-days", ({playerId, jailDays}) => {
    players[playerId].updateJailDays(jailDays);
});

socket.on("offer-pay-out-of-jail", () => {
    offerPayOutOfJail();
});

// Mortgage actions
socket.on("mortgage-property", ({playerId, placeIdx}) => {
    mortgageProperty(players[playerId], placeIdx);
});

socket.on("unmortgage-property", ({playerId, placeIdx}) => {
    unmortgageProperty(players[playerId], placeIdx);
});

socket.emit("start-up", {
    secretKey
});

</script>

</body></html>